**** This file to be used by the receiving microcontroller's computer *****

#include <zephyr/kernel.h>
#include <zephyr/device.h>
#include <zephyr/devicetree.h>
#include <zephyr/drivers/gpio.h>
#include <zephyr/sys/printk.h>
#include <zephyr/drivers/uart.h>


#define SLEEP_TIME_MS 100

//Define the receiving timeout period
#define RECEIVE_TIMEOUT 100

//Get the device pointer of the UART hardware
const struct device *uart = DEVICE_DT_GET(DT_NODELABEL(uart0));

//Define the receive buffer
static uint8_t rx_buf[100] = {0};

//Define the callback function for UART
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
        printk("Entered Callback");
        k_msleep(100);
      switch (evt->type) {

      case UART_RX_RDY:
                printk("Inside case");
                k_msleep(10);
            if ((rx_buf[0]) == 1) {
                        printk("Entered if");
                        k_msleep(100);
                  if (evt->data.rx.buf[evt->data.rx.offset] == '1') {
                        printk("Button #1 pushed");
                                k_msleep(100);
                  }
            }
            break;
      case UART_RX_DISABLED:
            uart_rx_enable(dev, rx_buf, sizeof rx_buf, RECEIVE_TIMEOUT);
            break;

      default:
                printk("uart evt code = %d\r\n", evt->type);
                printk("received %x\r\n", evt->data.rx.buf[evt->data.rx.offset]);
            break;
      }
}

int main(void)
{
      int ret;
      //Verify that the UART device is ready
      if (!device_is_ready(uart)) {
            printk("UART device not ready\n");
            return 1;
      }
      
      //Register the UART callback function
      ret = uart_callback_set(uart, uart_cb, NULL);
      if (ret) {
            return 1;
      }
      
      //Start receiving by calling uart_rx_enable() and pass it the address of the receive  buffer
        k_msleep(5000);
      ret = uart_rx_enable(uart, rx_buf, sizeof(rx_buf), RECEIVE_TIMEOUT);
        printk("Started receiving...");
        k_msleep(100);
      if (ret) {
            return 1;
      }
      while (1) {
            k_msleep(SLEEP_TIME_MS);
      }
}